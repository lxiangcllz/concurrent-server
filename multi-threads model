//server.c
#include <stdio.h>
#include <fcntl.h>
#include <ctype.h>
#include <pthread.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <string.h>

#include "wrap.h"

#define SERV_PORT 7777
#define SERV_IP "127.0.0.1"
#define MAXLINE 8192

struct s_info { //bind a client's sockaddr and its file descriptor
        struct sockaddr_in clie_addr;
        int cfd;
};

void *child_thrd(void *arg) { //start routine of child thread
        int n, i;
        struct s_info *ts = (struct s_info *)arg;
        char buf[MAXLINE];
        char str[INET_ADDRSTRLEN]; //cmd:"[+d": #define INET_ADDRSTRLEN 16

        while (1) {
                n = Read(ts->cfd, buf, MAXLINE);
                if (n == 0) { //client close, read over
                        printf("the client %d closed ...\n", ts->cfd);
                        break; //get out of the loop and close cfd
                }
                printf("received from client IP: %s at port: %d, thread: %lu\n",
                                inet_ntop(AF_INET, &(*ts).clie_addr.sin_addr, str, sizeof(str)),
                                ntohs((*ts).clie_addr.sin_port),
                                pthread_self());

                for (i = 0; i < n; i++)
                        buf[i] = toupper(buf[i]);
                Write(ts->cfd, buf, n);
                Write(STDOUT_FILENO, buf, n);
        }
        Close(ts->cfd); //if n == 0
        return (void *)0;
}

int main() {
        int lfd, cfd;
        struct sockaddr_in serv_addr, clie_addr;
        socklen_t clie_addr_len;
        pthread_t tid;
        int i = 0;
        struct s_info ts[256]; //max number of threads to be created

        lfd = Socket(AF_INET, SOCK_STREAM, 0);

        bzero(&serv_addr, sizeof(serv_addr));
        serv_addr.sin_family = AF_INET;
        serv_addr.sin_port = htons(SERV_PORT);
        //serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
        inet_pton(AF_INET, (const char *)SERV_IP, &serv_addr.sin_addr.s_addr);
        Bind(lfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr));

        Listen(lfd, 128);
        printf("Accepting client connect ...\n");

        while (1) {
                bzero(&clie_addr, sizeof(clie_addr));
                clie_addr_len = sizeof(clie_addr);
                cfd = Accept(lfd, (struct sockaddr *)&clie_addr, &clie_addr_len);
                ts[i].clie_addr = clie_addr;
                ts[i].cfd = cfd;

                // error handling if numbers of new threads is up to the limit

                pthread_create(&tid, NULL, child_thrd, (void *)&ts[i]);
                pthread_detach(tid); //child thread detachs(in case that a zombie thread is created), no need for pthread_join
                i++;
        }

        return 0;
}
