/* server.c */
#include <stdio.h>
#include <unistd.h>
#include <ctype.h>
#include <sys/epoll.h>
#include <strings.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include "wrap.h"

#define SERV_IP "127.0.0.1"
#define SERV_PORT 7777
#define MAXLINE 1024
#define OPEN_MAX 1024

int main() {
        int lfd, cfd, sockfd, epfd;
        int i, j, n, nready, ret;
        struct sockaddr_in serv_addr, clie_addr;
        socklen_t clie_addr_len;
        struct epoll_event evt;
        struct epoll_event client[OPEN_MAX];
        char str[INET_ADDRSTRLEN], buf[MAXLINE];

        lfd = Socket(AF_INET, SOCK_STREAM, 0);

        int opt = 1;
        setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));

        bzero(&serv_addr, sizeof(serv_addr));
        serv_addr.sin_family = AF_INET;
        serv_addr.sin_port = htons(SERV_PORT);
        serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
        //inet_pton(AF_INET, SERV_IP, &serv_addr.sin_addr); 
        Bind(lfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr));

        Listen(lfd, 128);

        epfd = epoll_create(OPEN_MAX);
        if (epfd == -1)
                perr_exit("epoll_create error");

        evt.events = EPOLLIN;
        evt.data.fd = lfd;
        ret = epoll_ctl(epfd, EPOLL_CTL_ADD, lfd, &evt);
        if (ret == -1)
                perr_exit("epoll_ctl error");
                
        while (1) {
                nready = epoll_wait(epfd, client, OPEN_MAX, -1);
                if (nready == -1)
                        perr_exit("epoll_exit error");

                for (i = 0; i < nready; i++) {
                        if (!(client[i].events & EPOLLIN)) //not read event
                                continue;

                        if (client[i].data.fd == lfd) {
                                clie_addr_len = sizeof(clie_addr);
                                cfd = Accept(lfd, (struct sockaddr *)&clie_addr, &clie_addr_len);
                                printf("client %s connects at port %d\n",
                                                inet_ntop(AF_INET, &clie_addr.sin_addr, str, sizeof(str)),
                                                ntohs(clie_addr.sin_port));

                                evt.events = EPOLLIN;
                                evt.data.fd = cfd;
                                ret = epoll_ctl(epfd, EPOLL_CTL_ADD, cfd, &evt);
                                if (ret == -1)
                                        perr_exit("epoll_ctl error");
                        } else {
                                sockfd = client[i].data.fd;
                                n = Read(sockfd, buf, MAXLINE);
                                if (n < 0) {
                                        perror("read n < 0 error");
                                        ret = epoll_ctl(epfd, EPOLL_CTL_DEL, sockfd, NULL);
                                        if (ret == -1)
                                                perr_exit("epoll_ctl error");
                                        Close(sockfd);
                                }
                                else if (n == 0) { //client closed
                                        ret = epoll_ctl(epfd, EPOLL_CTL_DEL, sockfd, NULL);
                                        if (ret == -1)
                                                perr_exit("epoll_ctl error");
                                        Close(sockfd);
                                        printf("client[%d] closed connection\n", sockfd);
                                } else {
                                        for (j = 0; j < n; j++)
                                                buf[j] = toupper(buf[j]);
                                        Write(sockfd, buf, n);
                                        Write(STDOUT_FILENO, buf, n);
                                }
                        }
                }
        }
        Close(lfd);
        Close(epfd);
        return 0;
}
