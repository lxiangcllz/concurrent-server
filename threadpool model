#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#include <assert.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
#include <errno.h>
#include "threadpool.h"

#define DEFAULT_TIME 10         //check every 10s
#define MIN_WAIT_TASK_NUM 10    //add new threads if queue_size > MIN_WAIT_TASK_NUM
#define DEFAULT_THREAD_VARY 10  //Step size for creating and destroying threads

typedef struct {
        void *(*function)(void *);      //call back function
        void *arg;                      //argument of the call back func
} threadpool_task_t;                    //task struct of children threads

//information about thread pool
struct threadpool_t {
        pthread_mutex_t lock;           //lock this struct
        pthread_mutex_t thread_counter; //lock busy_thr_num
        pthread_cond_t queue_not_full;  //the threads adding tasks block on it if task queue is full
        pthread_cond_t queue_not_empty; //notify the threads waiting for tasks if task queue isn't empty

        pthread_t *threads;             //restore tids of threads in thread pool
        pthread_t adjust_tid;           //tid of management thread
        threadpool_task_t *task_queue;  //task queue

        int min_thr_num;                //minimal number of threads in thread pool
        int max_thr_num;                //maximal number ...
        int live_thr_num;               //number of alive threads in thread pool
        int busy_thr_num;               //number of busy threads ...
        int wait_exit_thr_num;          //number of threads to be destroyed

        int queue_front;                //beginning of task_queue
        int queue_rear;                 //rear ...
        int queue_size;                 //real number of tasks in task queue
        int queue_max_size;             //maximal number of tasks contained in task queue

        int shutdown;                   //flag of thread pool indicating the status of it: true\false
};

void *threadpool_thread(void *threadpool); //call back function of working threads
void *adjust_thread(void *threadpool);  //call back function of management thread
int is_thread_alive(pthread_t tid);     //check a thread is alive
int threadpool_free(threadpool_t *pool);

threadpool_t *threadpool_create(int min_thr_num, int max_thr_num, int queue_max_size) {
        int i;
        threadpool_t *pool = NULL;
        do {
                if ( (pool = (threadpool_t *)malloc(sizeof(threadpool_t))) == NULL ) {
                        printf("malloc threadpool fail");
                        break;
                }

                pool->min_thr_num = min_thr_num;
                pool->max_thr_num = max_thr_num;
                pool->busy_thr_num = 0;
                pool->live_thr_num = min_thr_num;

                pool->queue_size = 0; //have no product in the beginning
                pool->queue_max_size = queue_max_size;
                pool->queue_front = 0;
                pool->queue_rear = 0;
                pool->shutdown = false; //not close thread pool

                //malloc for threads in thread pool
                pool->threads = (pthread_t *)malloc(sizeof(pthread_t) * max_thr_num);
                if (pool->threads == NULL) {
                        printf("malloc threads fail");
                        break;
                }
                memset(pool->threads, 0, sizeof(pthread_t) * max_thr_num);

                //malloc for task queue
                pool->task_queue = (threadpool_task_t *)malloc(sizeof(threadpool_task_t));
                if (pool->task_queue == NULL) {
                        printf("malloc task_queue fail");
                   }

                //initialize mutexes and condition variables
                if (pthread_mutex_init(&(pool->lock), NULL) != 0
                                || pthread_mutex_init(&(pool->thread_counter), NULL) != 0
                                || pthread_cond_init(&(pool->queue_not_empty), NULL) != 0
                                || pthread_cond_init(&(pool->queue_not_full), NULL) != 0) {
                        printf("init the lock or cond fail");
                        break;
                }

                //create min_thr_num threads and specify their call back function threadpool_thread
                for (i = 0; i < min_thr_num; i++) {
                        pthread_create(&(pool->threads[i]), NULL, threadpool_thread, (void *)pool); //pool points to the current thread pool
                        printf("start thread 0x%x...\n", (unsigned int)pool->threads[i]);
                }
                //create management thread and specify its call back function adjust_thread
                pthread_create(&(pool->adjust_tid), NULL, adjust_thread, (void *)pool);

                return pool;

        } while (0);

        threadpool_free(pool); //if failed, free resources malloced

        return NULL;
}

//add a task to thread pool
int threadpool_add(threadpool_t *pool, void *(*function)(void *arg), void *arg) {
        pthread_mutex_lock(&(pool->lock));

        while ((pool->queue_size == pool->queue_max_size) && (!pool->shutdown))  //task queue is full
                pthread_cond_wait(&(pool->queue_not_full), &(pool->lock));
        if (pool->shutdown)
                pthread_mutex_unlock(&(pool->lock));

        //clear the argument of call back function of working thread
        if (pool->task_queue[pool->queue_rear].arg != NULL) {
                free(pool->task_queue[pool->queue_rear].arg);
                pool->task_queue[pool->queue_rear].arg = NULL;
        }

        //add a new task to task queue
        pool->task_queue[pool->queue_rear].function = function;
        pool->task_queue[pool->queue_rear].arg = arg;
        pool->queue_rear = (pool->queue_rear + 1) % pool->queue_max_size; //circular enqueue
        pool->queue_size++;

        //waken a thread waiting for task
        pthread_cond_signal(&(pool->queue_not_empty));
        pthread_mutex_unlock(&(pool->lock));

        return 0;
}

//call back function of every working thread
void *threadpool_thread(void *threadpool) {
        threadpool_t *pool = (threadpool_t *)threadpool;
        threadpool_task_t task;

        while (true) {
                pthread_mutex_lock(&(pool->lock));

                while ((pool->queue_size == 0) && (!pool->shutdown)) { //no task yet and thread pool isn't closed
                        printf("thread 0x%x is waiting\n", (unsigned int)pthread_self());
                        pthread_cont_wait(&(pool->queue_not_empty), &(pool->lock)); //block on conditional variable queue_not_empty

                        if (pool->wait_exit_thr_num > 0) { //there are threads to exit
                                pool->wait_exit_thr_num--;

                               if (pool->live_thr_num > pool->min_thr_num) {
                                        //current thread exits
                                        printf("thread 0x%x is exiting\n", (unsigned int)pthread_self());
                                        pool->live_thr_num--;
                                        pthread_mutex_unlock(&(pool->lock));
                                        pthread_exit(NULL);
                                }
                        }
                }

                //if shutdown is true, close every thread in thread pool
                if (pool->shutdown) {
                        pthread_mutex_unlock(&(pool->lock));
                        printf("thread 0x%x is exiting\n", (unsigned int)pthread_self());
                        pthread_exit(NULL);
                }

                //get a task from task queue
                task.function = pool->task_queue[pool->queue_front].function;
                task.arg = pool->task_queue[pool->queue_front].arg;

                //circular dequeue
                pool->queue_front = (pool->queue_front + 1) % pool->queue_max_size;
                pool->queue_size--;

                //notify server(clients in fact) to add new tasks to task queue
                pthread_cond_broadcast(&(pool->queue_not_full));

                //unlock the thread pool once getting a task
                pthread_mutex_unlock(&(pool->lock));

                //carry out the task
                printf("thread 0x%x start working\n", (unsigned int)thread_self());
                pthread_mutex_lock(&(pool->thread_counter));
                pool->busy_thr_num++;
                pthread_mutex_unlock(&(pool->thread_counter));
                task.function(task.arg); //(*(task.function))(task.arg); //calling of call back function

                //end of the task
                printf("thread 0x%x end working\n", (unsigned int)pthread_self());
                pthread_mutex_lock(&(pool->thread_counter));
                pool->busy_thr_num--;
                pthread_mutex_unlock(&(pool->thread_counter));
        }

        pthread_exit(NULL);
}

//call back function of management thread
void *adjust_thread(void *threadpool) {
        int i;
        threadpool_t *pool = (threadpool_t *)threadpool;

        while (!pool->shutdown) {
                sleep(DEFAULT_TIME);

                pthread_mutex_lock(&(pool->lock));
                int queue_size = pool->queue_size;
                int live_thr_num = pool->live_thr_num;
                pthread_mutex_unlock(&(pool->lock));

                pthread_mutex_lock(&(pool->thread_counter));
                int busy_thr_num = pool->busy_thr_num;
                pthread_mutex_unlock(&(pool->thread_counter));

                //create new threads 
                if (queue_size >= MIN_WAIT_TASK_NUM && live_thr_num < pool->max_thr_num) {
                        pthread_mutex_lock(&(pool->lock));
                        int add = 0;

                        //add DEFAULT_THREAD_VARY new threads at a time
                        for (i = 0; i < pool->max_thr_num && add < DEFAULT_THREAD_VARY
                                        && pool->live_thr_num < pool->max_thr_num; i++) {
                                if (pool->threads[i] == 0 || !is_thread_alive(pool->threads[i])) {
                                        pthread_create(&(pool->threads[i]), NULL, threadpool_thread, (void *)pool);
                                        add++;
                                        pool->live_thr_num++;
                                }
                        }

                        pthread_mutex_unlock(&(pool->lock));
                }

                //destroy idle threads
                if ((busy_thr_num * 2) < live_thr_num && live_thr_num > pool->min_thr_num) {
                        pthread_mutex_lock(&(pool->lock));
                        pool-wait_exit_thr_num = DEFAULT_THREAD_VARY;
                        pthread_mutex_unlock(&(pool->lock));

                        for (i = 0; i < DEFAULT_THREAD_VARY; i++) {
                                //notify those idle threads who will exit automatically
                                pthread_cond_signal(&(pool->queue_not_empty));
                        }
                }
        }

        return NULL;
}

int threadpool_destroy(threadpool_t *pool) {
        int i;
        if (pool == NULL)
                return -1;
        pool->shutdown = true;  //the whole thread pool can be closed now

        //destroy management thread first
        pthread_join(pool->adjust_tid, NULL);

        for (i = 0; i < pool->live_thr_num; i++) {
                //notify all idle threads
                pthread_cond_broadcast(&(pool->queue_not_empty));
        }
        for (i = 0; i < pool->live_thr_num; i++) {
                pthread_join(pool->threads[i], NULL);
        }
        threadpool_free(pool);

        return 0;
}

int threadpool_free(threadpool_t *pool) {
        if (pool == NULL)
                return -1;

        if (pool->task_queue)
                free(pool->task_queue);

        if (pool->threads) {
                free(pool->threads);

                pthread_mutex_lock(&(pool->lock));
                pthread_mutex_destroy(&(pool->lock));

                pthread_mutex_lock(&(pool->counter));
                pthread_mutex_destroy(&(pool->thread_counter));

                pthread_cond_destroy(&(pool->queue_not_empty));

                pthread_cond_destroy(&(pool->queue_not_full));
        }
        free(pool);
        pool = NULL;

        return 0;
}

int threadpool_all_threadnum(threadpool_t *pool) {
        int all_threadnum = -1;

        pthread_mutex_lock(&(pool->lock));
        all_threadnum = pool->live_thr_num;
        pthread_mutex_unlock(&(pool->lock));

        return all_threadnum;
}

int threadpool_busy_threadnum(threadpool_t *pool) {
        int busy_threadnum = -1;

        pthread_mutex_lock(&(pool->thread_counter));
        all_threadnum = pool->busy_thr_num;
        pthread_mutex_unlock(&(pool->thread_counter));

        return busy_threadnum;
}

int is_thread_alive(pthread_t tid) {
        int kill_rc = pthread_kill(tid, 0); //send signal 0 to test if thread tid is alive
        if (kill_rc == ESRCH)
                return false;

        return true;
}

//test of thread pool
#if 1
void *process(void *arg) { //Simulate the process of server(children threads) processing data
        printf("thread 0x%x working on task %d\n", (unsigned int)pthread_self(), (int)arg);
        sleep(1);
        printf("task %d is end\n", (int)arg);

        return NULL;
}

int main() {
        //threadpool_t *threadpool_create(int min_thr_num, int max_thr_num, int queue_max_size);
        threadpool_t *thp = threadpool_create(3, 100, 100);     //create thread pool
        printf("pool inited");

        int num[20], i;
        for (i = 0; i < 20; i++) {                              //simulating the process of clients producing data
                num[i] = i;                                     //data: i
                printf("add task %d\n", i);
                threadpool_add(thp, process, (void *)&num[i]);  //add task to thread pool
        }
        sleep(10);                                              //waiting for children threads finishing their tasks
        threadpool_destroy(thp);

        return 0;
}

#endif
