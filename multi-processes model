//server.c
#include <stdio.h>
#include <ctype.h>
#include <arpa/inet.h>
#include <signal.h>
#include <unistd.h>
#include <strings.h>
#include <stdlib.h>
#include <sys/wait.h>
#include "wrap.h"

#define SERV_PORT 6666 
//#define SERV_IP "127.0.0.1"

void handle_child(int signo) {
        while (waitpid(0, NULL, WNOHANG) > 0); 

        return ;
}

int main() {
        int lfd, cfd;
        struct sockaddr_in serv_addr, clie_addr;
        socklen_t clie_addr_len;
        pid_t pid;
        int n, i;
        char buf[BUFSIZ], clie_IP[BUFSIZ];

        lfd = Socket(AF_INET, SOCK_STREAM, 0);

        bzero(&serv_addr, sizeof(serv_addr));
        serv_addr.sin_family = AF_INET;
        serv_addr.sin_port = htons(SERV_PORT); //convert to net bytes order
        serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
        //inet_pton(AF_INET, (const char *)SERV_IP, &serv_addr.sin_addr.s_addr);
        Bind(lfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr));

        Listen(lfd, 128);

        while(1) {
                clie_addr_len = sizeof(clie_addr);
                cfd = Accept(lfd, (struct sockaddr *)&clie_addr, &clie_addr_len);
                printf("client IP: %s, port: %d\n",
                                inet_ntop(AF_INET, &clie_addr.sin_addr.s_addr, clie_IP, sizeof(clie_IP)), //inet_ntop returns the third argument
                                ntohs(clie_addr.sin_port)); //convert net bytes order to host bytes order

                pid = fork();
                if (pid < 0) {
                        perror("fork error");
                        exit(1);
                } else if (pid == 0) { //child
                        close(lfd); //lfd is useless for child now
                        break; //get out of the loop to go on
                } else if (pid > 0) { //parent
                        close(cfd); //cfd is useless for parent now
                        signal(SIGCHLD, handle_child); //wait for children's end
                }
        }

        if (pid == 0) { //child
                while (1) {
                        n = Read(cfd, buf, sizeof(buf));
                        if (n == -1) { //other errors except for signal interruption
                                perror("read error");
                                exit(1);
                        } else if (n == 0) { //client close, read over
                                close(cfd);
                                return 0;
                        } else { //loop to handle data
                                for(i = 0; i < n; i++)
                                        buf[i] = toupper(buf[i]);
                                Write(cfd, buf, n);
                                Write(STDOUT_FILENO, buf, n); //print to screen
                        }
                }
        }

        return 0;
}
