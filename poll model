//server.c
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <netinet/in.h>
#include <poll.h>
#include <errno.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <strings.h>
#include "wrap.h"

#define SERV_IP "127.0.0.1"
#define SERV_PORT 7777
#define OPEN_MAX 1024
#define MAXLINE 1024

int main() {

        struct sockaddr_in serv_addr, clie_addr;
        socklen_t clie_addr_len;
        int lfd, cfd, sockfd;
        struct pollfd client[OPEN_MAX];
        char buf[MAXLINE], str[INET_ADDRSTRLEN];
        int i, j, nready, maxi;
        ssize_t n;

        lfd = Socket(AF_INET, SOCK_STREAM, 0);

        int opt = 1;
        setsockopt(lfd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));

        bzero(&serv_addr, sizeof(serv_addr));
        serv_addr.sin_family = AF_INET;
        serv_addr.sin_port = htons(SERV_PORT);
        inet_pton(AF_INET, SERV_IP, &serv_addr.sin_addr.s_addr);
        Bind(lfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr));

        Listen(lfd, 128);

        client[0].fd = lfd;
        client[0].events = POLLIN; //listen to new client's connection

        maxi = 0;

        for (i = 1; i < OPEN_MAX; i++)
                client[i].fd = -1;

        while (1) {
                nready = poll(client, maxi + 1, -1);
                if (client[0].revents & POLLIN) { //a new client connection request
                        clie_addr_len = sizeof(clie_addr);
                        cfd = Accept(lfd, (struct sockaddr *)&clie_addr, &clie_addr_len);
                        printf("received from %s at port %d\n",
                                        inet_ntop(AF_INET, &clie_addr.sin_addr, str, sizeof(str)),
                                        ntohs(clie_addr.sin_port));
                        for (i = 1; i < OPEN_MAX; i++) {
                                if (client[i].fd < 0) {
                                        client[i].fd = cfd;
                                        break;
                                }
                        }
                        if (i == OPEN_MAX)
                                perr_exit("too many clients");
                        client[i].events = POLLIN;

                        if (maxi < i)
                                maxi = i;

                        if (--nready == 0) //back to poll
                                continue;
                }

                for (i = 1; i <= maxi; i++) {
                        if ( (sockfd = client[i].fd) < 0 )
                                continue;

                        if (client[i].revents & POLLIN) {
                                if ( (n = Read(sockfd, buf, MAXLINE)) < 0) {
                                        if (errno == ECONNRESET) { //receive a RST from client
                                                printf("client[%d] aborted connection\n", i);
                                                Close(sockfd);
                                                client[i].fd = -1;
                                        } else
                                                perr_exit("read error");
                                } else if (n == 0) { //connection closed by client
                                        printf("client[%d] closed connection\n", i);
                                        Close(sockfd);
                                        client[i].fd = -1;
                                } else {
                                        for (j = 0; j < n; j++)
                                                buf[j] = toupper(buf[j]);
                                        Writen(sockfd, buf, n);
                                }

                                if (--nready == 0)
                                        break;
                        }
                }
        }

        return 0;
}
